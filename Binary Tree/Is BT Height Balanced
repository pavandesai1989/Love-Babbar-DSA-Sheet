//brute force 
//Time complexity is o(n*n)
bool IsBTHeightBalanced(BTNode* root)
{
    //base
    if(root == NULL)
        return true;
    
    bool IsLeftBala = IsBTHeightBalanced(root->left);
    bool IsRightBala = IsBTHeightBalanced(root->right);
    
    bool diff = abs(HeightofBT(root->left) - HeightofBT(root->right))<=1;
    
    if( IsLeftBala && IsRightBala && diff)
        return true;
    else
        return false;
}



//optimised code in o(n) time
pair<int,int> IsBTHeightBalancedOpti_Util(BTNode* root)
{
    if(root == NULL)
    {
        pair<int,int> p = make_pair(true,0);
        return p;
    }
    
    pair<int,int> pLeft = IsBTHeightBalancedOpti_Util(root->left);
    pair<int,int> pRight = IsBTHeightBalancedOpti_Util(root->right);
    
    bool IsLeftBalanced = pLeft.first;
    bool IsRightBalanced = pRight.first;
    
    bool diff = abs(pLeft.second - pRight.second ) <=1;
    
    pair<int,int> ans;
    if(IsLeftBalanced && IsRightBalanced && diff)
    {
        ans.first = true;
        ans.second = max(pLeft.second,pRight.second) + 1;
    }
    else
        ans.first = false;
    
    return ans;
}

//Optimized Is balanced tre
bool IsBTHeightBalancedOpti(BTNode* root)
{
    return IsBTHeightBalancedOpti_Util(root).first;
}
