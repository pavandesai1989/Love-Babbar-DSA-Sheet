        vector<int> ans;
        if(!root)
           return ans;
         
        map<int,map<int,vector<int>>> nodes; //hd,level,list of node
        queue<pair<Node*,pair<int,int>>> q; //we store node,Hd,level
        
        //push the root node.Its hd is 0 and level 0
        q.push(make_pair(root,make_pair(0,0)));
        
        while(!q.empty())
        {
            //take the node
            pair<Node*,pair<int,int>> temp = q.front();
            //extract node
            Node* fNode = temp.first;
            //extract the hori distance
            int hd = temp.second.first;
            //extract the level
            int lvl = temp.second.second;
            
            //add this in the map of nodes
            nodes[hd][lvl].push_back(fNode->data);
            
            if(fNode->left)//when we move left horizontal dist reduce by 1 and level adds by 1
               q.push(fNode->left,make_pair(hd-1,lvl+1));
            
            if(fNode->right)
               q.push(fNode->right,make_pair(hd+1,lvl+1));
        }
        
        //extract the ans
        for(auto i:nodes)//int int vector<int>
        {
            for(auto j:i.second). //int vector<int>
            {
                for(auto k:j.seocnd) //vector<int>
                {
                    ans.push_back(k);
                }
            } 
        }
        
        return ans;
